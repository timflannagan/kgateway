version: 2
before:
  hooks:
    - go mod tidy
    - go mod download
builds:
  - id: controller
    main: ./projects/gateway2/cmd/
    binary: gloo-linux-{{ .Arch }}
    gcflags: "{{ .Env.GCFLAGS }}"
    ldflags: "{{ .Env.LDFLAGS }}"
    env:
    - CGO_ENABLED=0
    - GO111MODULE=on
    - GOARCH={{ .Arch }}
    - GOOS={{ .Os }}
    mod_timestamp: "{{ .CommitTimestamp }}"
    goos:
      - linux
    goarch:
      - amd64
      - arm64
  - id: sds
    main: ./projects/sds/cmd/
    binary: sds-linux-{{ .Arch }}
    gcflags: "{{ .Env.GCFLAGS }}"
    ldflags: "{{ .Env.LDFLAGS }}"
    env:
    - CGO_ENABLED=0
    - GO111MODULE=on
    - GOARCH={{ .Arch }}
    - GOOS={{ .Os }}
    goos:
      - linux
    goarch:
      - amd64
      - arm64
dockers:
  - image_templates:
      - &arm_controller_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.GLOO_IMAGE_REPO }}:{{ .Env.VERSION }}-arm64"
    use: buildx
    dockerfile: &controller_dockerfile projects/gateway2/cmd/Dockerfile
    goos: linux
    goarch: arm64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/arm64"
      - "--build-arg=GOARCH=arm64"
      - "--build-arg=ENVOY_IMAGE={{ .Env.ENVOY_GLOO_IMAGE }}"
      - "--build-arg=TARGETARCH=arm64"
  - image_templates:
      - &amd_controller_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.GLOO_IMAGE_REPO }}:{{ .Env.VERSION }}-amd64"
    use: buildx
    dockerfile: *controller_dockerfile
    goos: linux
    goarch: amd64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/amd64"
      - "--build-arg=GOARCH=amd64"
      - "--build-arg=ENVOY_IMAGE={{ .Env.ENVOY_GLOO_IMAGE }}"
      - "--build-arg=TARGETARCH=amd64"
  - image_templates:
      - &arm_sds_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}:{{ .Env.VERSION }}-arm64"
    use: buildx
    dockerfile: &sds_dockerfile projects/sds/cmd/Dockerfile
    goos: linux
    goarch: arm64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/arm64"
      - "--build-arg=GOARCH=arm64"
  - image_templates:
      - &amd_sds_image "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}:{{ .Env.VERSION }}-amd64"
    use: buildx
    dockerfile: *sds_dockerfile
    goos: linux
    goarch: amd64
    build_flag_templates:
      - "--pull"
      - "--platform=linux/amd64"
      - "--build-arg=GOARCH=amd64"
docker_manifests:
  - name_template: "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}:{{ .Env.VERSION }}"
    image_templates:
      - *amd_controller_image
      - *arm_controller_image
  - name_template: "{{ .Env.IMAGE_REGISTRY }}/{{ .Env.SDS_IMAGE_REPO }}:{{ .Env.VERSION }}"
    image_templates:
      - *amd_sds_image
      - *arm_sds_image
changelog:
  disable: true
release:
  prerelease: "auto"
  mode: "replace"
  footer: |
    # Quickstart

    First, create a [kind cluster](https://kind.sigs.k8s.io/docs/user/quick-start/#installation).

    ```bash
    kind create cluster
    ```

    Then, deploy the Kubernetes Gateway API CRDs.

    ```bash
    kubectl apply --kustomize "https://github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=v1.2.1"
    ```

    Install the `kgateway` controller.

    ```bash
    helm install --create-namespace --namespace kgateway-system kgateway oci://{{ .Env.IMAGE_REGISTRY }}/kgateway-helm/kgateway --version {{ .Env.VERSION }}
    ```

    Verify the release was successful.

    ```bash
    kubectl get pods -n kgateway-system
    ```

    If the release was successful, you should see a `kgateway` pod running.

    ## Helm Charts

    The Helm chart is available at [{{ .Env.IMAGE_REGISTRY }}/kgateway-helm](https://github.com/{{ .Env.IMAGE_REGISTRY }}/pkgs/container/kgateway-helm/).

    ## Docker Images

    The Docker images are available at [{{ .Env.IMAGE_REGISTRY }}/{{ .Env.GLOO_IMAGE_REPO }}:{{ .Env.VERSION }}]({{ .Env.IMAGE_REGISTRY }}/{{ .Env.GLOO_IMAGE_REPO }}:{{ .Env.VERSION }}).
