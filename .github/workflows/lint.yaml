name: Lint Helm Charts

on:
  pull_request: { }
  merge_group:
    types: [checks_requested]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  # TODO(tim): rename to lint-go or some equivalent.
  static-analysis:
    name: Lint Checks
    runs-on: ubuntu-22.04
    # The linter is intended to run quickly.
    # We define a 10-minute timeout on the linter config (.golangci.yaml) as well.
    # If we exceed this timeout, we should consider only running the linter on changed files.
    timeout-minutes: 10
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
    - name: Prep Go Runner
      uses: ./.github/actions/prep-go-runner
    - uses: golangci/golangci-lint-action@v7
      # `make analyze` runs the linter with similar arguments to what we use here.
      # If this action fails, try running `make analyze` locally.
      with:
        version: v2.1.6
        args: --verbose --modules-download-mode=readonly --allow-parallel-runners
        skip-cache: true
        skip-save-cache: true
        only-new-issues: false

  lint-helm:
    name: Lint Helm Charts
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
    - name: Lint Helm Charts
      run: make lint-kgateway-charts

  # TODO(tim): This should effectively be running a Makefile target + install deps when necessary.
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Check for Python file changes
        id: check_python_changes
        run: |
          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.py$'; then
            echo "PYTHON_CHANGED=true" >> "$GITHUB_ENV"
          else
            echo "PYTHON_CHANGED=false" >> "$GITHUB_ENV"
          fi
      - name: Install ruff
        if: env.PYTHON_CHANGED == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.9.0
      - name: Run ruff linter
        if: env.PYTHON_CHANGED == 'true'
        run: ruff check . --output-format=github --exclude '**/*_pb2.py' --exclude '**/*_pb2.pyi' --exclude '**/*_pb2_*.py'
      - name: Run ruff format check
        if: env.PYTHON_CHANGED == 'true'
        run: |
          if ! ruff format --diff . --exclude '**/*_pb2.py' --exclude '**/*_pb2.pyi' --exclude '**/*_pb2_*.py'; then
            echo "Ruff formatting issues detected. Please run 'ruff format . --exclude '**/*_pb2.py' --exclude '**/*_pb2.pyi' --exclude '**/*_pb2_*.py'' locally to fix formatting issues."
            exit 1
          fi

  # TODO(tim): I'm potentially fine with shelling out to a non-root Makefile here. I think in the
  # medium/long term, rustformations will become more important, so having it live in the root
  # Makefile is fine.
  lint_rust:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy,rustfmt
          cache: true
      - name: Lint
        run: |
          make -C internal/envoyinit/rustformations lint
